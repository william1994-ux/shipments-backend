"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    userss: [User!]! @all
    shipments: [Shipment] @all @guard(with: ["api"])
    shipment(id: ID @eq): Shipment @find @guard(with: ["api"])
    waybill(id: ID @eq): Waybill @find @guard(with: ["api"])
    waybills: [Waybill] @all
    shipments_by_user(user_id: ID @eq): [Shipment] @all @guard(with: ["api"])
    me: User  @auth 
    
}

type User {
    id: ID!
    name: String!
    email: String!
    shipment: [Shipment] @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Shipment {
    id: ID!
    user_id: ID!
    name: String!
    address: String!
    phone: String!
    waybill: Waybill @hasOne
    shipmentCount: Int! @count(model: "Shipment")
}

type Waybill {
    id: ID!
    shipment_id: ID!
    from: String!
    to: String!
    price: String!
    shipment: Shipment @belongsTo
}



type Mutation {

    addwaybill(
        shipment_id: String
	    from: String @rules(apply: ["required"])
        to: String @rules(apply: ["required"])
        price: String @rules(apply: ["required"])
	
	): Waybill @create(model: "App\\Models\\Waybill") @guard(with: ["api"])

    addshipment(
        user_id: String
	    name: String @rules(apply: ["required"])
        address: String @rules(apply: ["required"])
        phone: String @rules(apply: ["required"])
	
	): Shipment @create(model: "App\\Models\\Shipment") @guard(with: ["api"])

    updateshipment(
	id: ID @rules(apply: ["required"])
	name: String @rules(apply: ["required"])
	address: String @rules(apply: ["required"])
    phone: String @rules(apply: ["required"])
	): Shipment @update(model: "App\\Models\\Shipment") @guard(with: ["api"])

    updatewaybill(
	id: ID @rules(apply: ["required"])
	from: String @rules(apply: ["required"])
	to: String @rules(apply: ["required"])
    price: String @rules(apply: ["required"])
	): Waybill @update(model: "App\\Models\\Waybill") @guard(with: ["api"])

    deleteshipment(
	id: ID! @rules(apply: ["required"])
	): Shipment @delete(model: "App\\Models\\Shipment") @guard(with: ["api"])

    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])

    





    
}
